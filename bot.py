# bot.py

import os
from dotenv import load_dotenv

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)

from app.ocr_utils import extract_text_from_pdf, extract_text_from_image
from app.response_generator import explain_problem, generate_jobcenter_letter

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ö–Ω–æ–ø–∫–∏ ¬´–ù–∞—á–∞—Ç—å¬ª / ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª
REPLY_KEYBOARD = ReplyKeyboardMarkup(
    [["–ù–∞—á–∞—Ç—å –±–æ—Ç", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–æ—Ç"]],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? "
        "(–Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å –ø–∏—Å—å–º–æ–º)",
        reply_markup=REPLY_KEYBOARD
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    user_data = context.user_data

    # –ï—Å–ª–∏ –º—ã —É–∂–µ –∂–¥—ë–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–∏—Å—å–º–∞
    if user_data.get("await_letter_text"):
        user_answer = update.message.text.strip()
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º
        letter = generate_jobcenter_letter(user_answer)
        await update.message.reply_text("‚úÖ –í–æ—Ç –≤–∞—à–µ –ø–∏—Å—å–º–æ –≤ Jobcenter:\n\n" + letter)
        user_data.clear()
        return

    # –ï—Å–ª–∏ –º—ã —Å–ø—Ä–æ—Å–∏–ª–∏ ¬´–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–∏—Å—å–º–æ?¬ª –∏ –∂–¥—ë–º ¬´–¥–∞¬ª/¬´–Ω–µ—Ç¬ª
    if user_data.get("await_letter"):
        if text in ("–¥–∞", "–¥", "yes", "y"):
            user_data.pop("await_letter")
            user_data["await_letter_text"] = True
            await update.message.reply_text(
                "–•–æ—Ä–æ—à–æ. –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º –ø–∏—Å—å–º–µ."
            )
        else:
            user_data.clear()
            await update.message.reply_text("–ü–æ–Ω—è–ª, –ø–∏—Å—å–º–æ –Ω–µ –≥–æ—Ç–æ–≤–∏–º.")
        return

    # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if "–Ω–∞—á–∞—Ç—å" in text:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ PDF –∏–ª–∏ —Ñ–æ—Ç–æ –ø–∏—Å—å–º–∞ –∏–∑ Jobcenter.")
    elif "–∑–∞–≤–µ—Ä—à–∏—Ç—å" in text:
        await update.message.reply_text("–ë–æ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ!")
        context.user_data.clear()
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Å—å–º–∞.")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    file = await update.message.document.get_file()
    file_path = f"app/{update.message.document.file_name}"
    await file.download_to_drive(file_path)

    await update.message.reply_text("üìÑ –ò–∑—É—á–∞—é –ø–∏—Å—å–º–æ‚Ä¶")
    text = extract_text_from_pdf(file_path)
    if not text:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
        return

    explanation = explain_problem(text)
    await update.message.reply_text(
        f"üìå –í –ø–∏—Å—å–º–µ —É–∫–∞–∑–∞–Ω–æ:\n\n{explanation}\n\n"
        "–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –æ—Ç–≤–µ—Ç–Ω–æ–µ –ø–∏—Å—å–º–æ?"
    )
    user_data["await_letter"] = True

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    photo = update.message.photo[-1]
    file = await photo.get_file()
    file_path = "app/received_image.jpg"
    await file.download_to_drive(file_path)

    await update.message.reply_text("üñºÔ∏è –ò–∑—É—á–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚Ä¶")
    text = extract_text_from_image(file_path)
    if not text:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")
        return

    explanation = explain_problem(text)
    await update.message.reply_text(
        f"üìå –í –ø–∏—Å—å–º–µ —É–∫–∞–∑–∞–Ω–æ:\n\n{explanation}\n\n"
        "–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –æ—Ç–≤–µ—Ç–Ω–æ–µ –ø–∏—Å—å–º–æ?"
    )
    user_data["await_letter"] = True

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.Document.PDF, handle_document))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()